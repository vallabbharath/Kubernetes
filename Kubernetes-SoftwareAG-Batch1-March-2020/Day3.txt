Master + WORKStation - 52.66.125.191
WORKER 1 - 13.233.161.212
WORKER 2 - 13.127.27.130


To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.31.154:6443 --token sg2v48.cba6wg15cv0sp1f0 \
    --discovery-token-ca-cert-hash 

sha256:f2aed24976962494d82a82a33adaea01bc6fde6a077f3edf6791986714f1f97c


EMPTYDIR
==================
https://www.devopsschool.com/blog/kubernetes-volume-emptydir-explained-with-examples/

apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: scmgalaxy/nginx-devopsschoolv1
    name: test-container
    volumeMounts:
    - mountPath: /cache
      name: cache-volume
  volumes:
  - name: cache-volume
    emptyDir: {}
=================================
hostpath
https://www.devopsschool.com/blog/kubernetes-volume-hostpath-explained-with-examples/

apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: scmgalaxy/nginx-devopsschoolv1
    name: test-container
    volumeMounts:
    - mountPath: /test-pd
      name: test-volume
  volumes:
  - name: test-volume
    hostPath:
      # directory location on host
      path: /data
      # this field is optional
      type: DirectoryOrCreate

==========================================================
NFS
https://www.devopsschool.com/blog/setup-nfs-server-and-use-inside-a-kubernetes-pods-in-rhel-centos7/
https://www.devopsschool.com/blog/kubernetes-persistentvolume-and-persistentvolumeclaim-using-nfs-

volume-types/


apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: null
  generation: 1
  labels:
    app: my-dep
  name: my-dep1
  selfLink: /apis/apps/v1/namespaces/default/deployments/my-dep
spec:
  progressDeadlineSeconds: 600
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: my-dep
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: my-dep
    spec:
      containers:
      - image: scmgalaxy/nginx-devopsschoolv2
        imagePullPolicy: Always
        name: nginx-devopsschoolv1
        volumeMounts:
        - mountPath: /test-pd
          name: test-volume
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      volumes:
      - name: test-volume
        nfs:
          server: 172.31.31.154
          path: /softwareag
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}


=========================================
PV and PVC using nfs
https://www.devopsschool.com/blog/kubernetes-persistentvolume-and-persistentvolumeclaim-using-nfs-

volume-types/


apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0001 
spec:
  capacity:
    storage: 5Gi 
  accessModes:
  - ReadWriteOnce 
  nfs: 
    path: /softwareag/rrrrrrrr
    server: 172.31.31.154
  persistentVolumeReclaimPolicy: Recycle

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-claim1
spec:
  accessModes:
    - ReadWriteOnce 
  resources:
    requests:
      storage: 1Gi 

kind: Pod
apiVersion: v1
metadata:
  name: task-pv-pod1
spec:
  containers:
    - name: task-pv-container
      image: scmgalaxy/nginx-devopsschoolv1
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: task-pv-storage
  volumes:
    - name: task-pv-storage
      persistentVolumeClaim:
        claimName: nfs-claim1


PV and PVS using hostpath
https://www.devopsschool.com/blog/persistentvolume-persistentvolumeclaim-volumes-using-hostpath/


59  kubectl api-resources
   60  kubectl api-resources | grep per
   61  clear
   62  c
   63  kubectl get pv
   64  kubectl get pv -n=rajesh
   65  clear
   66  ls
   67  vi pv.yaml
   68  kubectl create -f pv.yaml
   69  kubectl get pv -n=rajesh
   70  clear
   71  l
   72  ls
   73  vi pvc.yaml
   74  kubectl get pv -n=rajesh
   75  kubectl create -f pvc.yaml -n=rajesh
   76  kubectl get pvc
   77  kubectl get pvc -n=rajesh
   78  kubectl get pv -n=rajesh
   79  vi pvc.yaml
   80  kubectl create -f pvc.yaml -n=rajesh
   81  kubectl get pvc -n=rajesh
   82  vi pv.yaml
   83  kubectl create -f pv.yaml
   84  kubectl get pvc -n=rajesh
   85  history


   1  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    2  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    3  sudo yum install â€“y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    4  sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    5  sudo yum install -y docker-ce
    6  sudo systemctl enable docker
    7  sudo systemctl start docker
    8  cat <<EOF > /etc/yum.repos.d/kubernetes.repo
    9  [kubernetes]
   10  name=Kubernetes
   11  baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
   12  enabled=1
   13  gpgcheck=1
   14  repo_gpgcheck=1
   15  gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg 

https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
   16  exclude=kube*
   17  EOF
   18  setenforce 0
   19  sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
   20  yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
   21  systemctl enable --now kubelet
   22  kubeadm init --ignore-preflight-errors all
   23  exit
   24  kubectl create ns lavanya
   25  kubectl get ns
   26  kubectl get pods
   27  kubectl get nodes
   28  ls
   29  mkdir lavanya
   30  cd lavanya
   31  cd ../
   32  cd rajesh
   33  ls
   34  cd ../
   35  cd lavanya
   36  vi emptydir.yaml
   37  kubectl create ns lavanya
   38  sudo -s
   39  rpm -qa | grep nfs-utils
   40  yum install nfs-utils rpcbind
   41  systemctl enable nfs-server
   42  systemctl enable rpcbind
   43  systemctl enable nfs-lock
   44  systemctl enable nfs-idmap
   45  systemctl start rpcbind
   46  systemctl start nfs-server
   47  systemctl start nfs-lock
   48  systemctl start nfs-idmap
   49  systemctl status nfs
   50  mkdir /softwareag
   51  chmod 1777 /softwareag
   52  vi /etc/exports
   53  exportfs -r
   54  systemctl restart nfs-server
   55  showmount -e
   56  clear
   57  exit
   58  cd /softwareag/
   59  clear
   60  ls
   61  pwd
   62  touch raj1 raj2
   63  ls
   64  ls
   65  ls
==========================================================
ConfigMap
https://www.devopsschool.com/blog/kubernetes-configmap-explained-using-example/


apiVersion: v1
kind: Pod
metadata:
  name: helloworld-nginx
  labels:
    app: helloworld-nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.11
    ports:
    - containerPort: 80
    volumeMounts:
    - name: config-volume
      mountPath: /etc/nginx/conf.d
  - name: k8s-demo
    image: scmgalaxy/nginx-devopsschoolv1
    ports:
    - containerPort: 3000
  volumes:
    - name: config-volume
      configMap:
        name: my-config
        items:
        - key: reverseproxy.conf
          path: myconfo.conf


Secret
=====================================
Secret ENCODE a Content.
https://www.devopsschool.com/tutorial/kubernetes/kubernetes-resource-objects/secrets-example-

programs.html



apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm


apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: scmgalaxy/nginx-devopsschoolv1
    volumeMounts:
    - name: foo
      mountPath: "/etc/foo"
      readOnly: true
  volumes:
  - name: foo
    secret:
      secretName: mysecret



88  kubectl api-resources
   89  kubectl api-resources | grep -i config
   90  clear
   91  kubectl api-resources | grep -i secret
   92  kubectl get cm
   93  kubectl get cm -n=rajesh
   94  kubectl create
   95  clear
   96  ls
   97  vi reverseproxy.conf
   98  kubectl create configmap my-config --from-file=reverseproxy.conf
   99  kubectl get cm -n=rajesh
  100  kubectl create configmap my-config --from-file=reverseproxy.conf -n=rajesh
  101  kubectl get cm -n=rajesh
  102  kubectl describe cm my-config -n=rajesh
  103  clear
  104  kubectl get cm -n=rajesh
  105  kubectl describe cm my-config -n=rajesh
  106  cleae
  107  clear
  108  vi cm.yaml
  109  kubectl create -f cm.yaml -n=rajesh
  110  kubectl get pods -n=rajesh
  111  kubectl exec helloworld-nginx ls /etc/nginx/conf.d
  112  kubectl exec helloworld-nginx ls /etc/nginx/conf.d -n=rajesh
  113  kubectl exec helloworld-nginx more /etc/nginx/conf.d/myconfo.conf -n=rajesh
  114  clear
  115  kubectl describe cm my-config -n=rajesh
  116  clear
  117  kubectl get secret -n=rajesh
  118  kubectl get secret
  119  kubectl describe secret default-token-k5n5q -n=rajesh
  120  kubectl describe secret default-token-zlwpl -n=rajesh
  121  clear
  122  kubectl get pod -n=rajesh
  123  kubectl describe pod helloworld-nginx -n=rajesh
  124  clar
  125  clear
  126  echo -n 'admin' | base64
  127  echo -n '1f2d1e2e67df' | base64
  128  clear
  129  vi sec.yaml
  130  kubectl create -f sec.yaml -n=rajesh
  131  kubectl get secret -n=rajesh
  132  ls
  133  vi sec-pod.yaml
  134  kubectl create -f sec-pod.yaml -n=rajesh
  135  kubectl get pod -n=rajesh
  136  kubectl exec mypod ls /etc/foo
  137  kubectl exec mypod ls /etc/foo -n=rajesh
  138  kubectl exec mypod more /etc/foo/password -n=rajesh
  139  kubectl exec mypod more /etc/foo/username -n=rajesh
  140  clear
  141  history


   74  kubectl get pv -n=rajesh
   75  kubectl create -f pvc.yaml -n=rajesh
   76  kubectl get pvc
   77  kubectl get pvc -n=rajesh
   78  kubectl get pv -n=rajesh
   79  vi pvc.yaml
   80  kubectl create -f pvc.yaml -n=rajesh
   81  kubectl get pvc -n=rajesh
   82  vi pv.yaml
   83  kubectl create -f pv.yaml
   84  kubectl get pvc -n=rajesh
   85  history
   86  clear
   87  kubectl
   88  kubectl api-resources
   89  kubectl api-resources | grep -i config
   90  clear
   91  kubectl api-resources | grep -i secret
   92  kubectl get cm
   93  kubectl get cm -n=rajesh
   94  kubectl create
   95  clear
   96  ls
   97  vi reverseproxy.conf
   98  kubectl create configmap my-config --from-file=reverseproxy.conf
   99  kubectl get cm -n=rajesh
  100  kubectl create configmap my-config --from-file=reverseproxy.conf -n=rajesh
  101  kubectl get cm -n=rajesh
  102  kubectl describe cm my-config -n=rajesh
  103  clear
  104  kubectl get cm -n=rajesh
  105  kubectl describe cm my-config -n=rajesh
  106  cleae
  107  clear
  108  vi cm.yaml
  109  kubectl create -f cm.yaml -n=rajesh
  110  kubectl get pods -n=rajesh
  111  kubectl exec helloworld-nginx ls /etc/nginx/conf.d
  112  kubectl exec helloworld-nginx ls /etc/nginx/conf.d -n=rajesh
  113  kubectl exec helloworld-nginx more /etc/nginx/conf.d/myconfo.conf -n=rajesh
  114  clear
  115  kubectl describe cm my-config -n=rajesh
  116  clear
  117  kubectl get secret -n=rajesh
  118  kubectl get secret
  119  kubectl describe secret default-token-k5n5q -n=rajesh
  120  kubectl describe secret default-token-zlwpl -n=rajesh
  121  clear
  122  kubectl get pod -n=rajesh
  123  kubectl describe pod helloworld-nginx -n=rajesh
  124  clar
  125  clear
  126  echo -n 'admin' | base64
  127  echo -n '1f2d1e2e67df' | base64
  128  clear
  129  vi sec.yaml
  130  kubectl create -f sec.yaml -n=rajesh
  131  kubectl get secret -n=rajesh
  132  ls
  133  vi sec-pod.yaml
  134  kubectl create -f sec-pod.yaml -n=rajesh
  135  kubectl get pod -n=rajesh
  136  kubectl exec mypod ls /etc/foo
  137  kubectl exec mypod ls /etc/foo -n=rajesh
  138  kubectl exec mypod more /etc/foo/password -n=rajesh
  139  kubectl exec mypod more /etc/foo/username -n=rajesh
  140  clear
  141  history
  142  clear
  143  kubectl explain secret.type
  144  kubectl explain secret
  145  kubectl explain secret.type
  146  clear
  147  ls
  148  kubectl get cm -n=rajesh
  149  kubectl edit cm -n=rajesh
  150  clear
  151  kubectl get deploy -n=rajesh
  152  kubectl
  153  clear
  154  kubectl get pod -n=rajesh
  155  history
  156  kubectl edit cm -n=rajesh
  157  kubectl exec mypod more /etc/foo/username -n=rajesh
  158  kubectl exec helloworld-nginx more /etc/nginx/conf.d/myconfo.conf -n=rajesh
  159  clear
  160  kubectl edit cm -n=rajesh
  161  kubectl exec helloworld-nginx more /etc/nginx/conf.d/myconfo.conf -n=rajesh
  162  clear
  163  sudo -s
  164  clear
  165  kubectl get svc
  166  clear
  167  ls
  168  kubectl get svc -n=rajesh
  169  kubectl get pods -n=rajesh
  170  kubectl get pods -n=rajesh --show-lables
  171  kubectl get pods -n=rajesh --show-labels
  172  kubectl delete pod helloworld-nginx -n=rajesh
  173  kubectl get pods -n=rajesh --show-lables
  174  clear
  175  kubectl get pods -n=rajesh --show-lables
  176  kubectl get pods -n=rajesh --show-labels
  177  kubectl get svc -n=rajesh --show-labels
  178  kubectl create svc svc1  -n=rajesh
  179  kubectl create svc svc1 -n=rajesh
  180  kubectl create svc -h
  181  kubectl create svc
  182  kubectl help create svc
  183  kubectl help create
  184  kubectl help create service
  185  kubectl help create service -h
  186  kubectl create svc svc1 --type=clusterip -n=rajesh
  187  kubectl create svc svc1 --tcp=80:80 -n=rajesh
  188  kubectl create svc clusterip svc1 --tcp=80:80 -n=rajesh
  189  clear
  190  kubectl get svc -n=rajesh --show-labels
  191  kubectl describe svc svc1 -n=rajesh
  192  kubectl edit svc svc1 -n=rajesh
  193  kubectl describe svc svc1 -n=rajesh
  194  kubectl get pod --show-labels -n=rajesh
  195  kubectl lable -h?
  196  kubectl lable -h
  197  kubectl label -h
  198  clear
  199  kubectl get pod --show-labels -n=rajesh
  200  kubectl describe svc svc1 -n=rajesh
  201  kubectl get pod --show-labels -n=rajesh
  202  kubectl get svc -n=rajesh --show-labels
  203  kubectl label pods mypod app=svc2
  204  kubectl label pods mypod app=svc2 -n=rajesh
  205  kubectl get svc -n=rajesh --show-labels
  206  kubectl get pod --show-labels -n=rajesh
  207  kubectl describe svc svc1 -n=rajesh
  208  kubectl get svc -n=rajesh
  209  curl http://10.97.125.221'
  210  curl http://10.97.125.221
  211  kubectl get pod --show-labels -n=rajesh
  212  kubectl edit svc svc1 -n=rajesh
  213  kubectl describe svc svc1 -n=rajesh
  214  curl http://10.97.125.221
  215  clear
  216  ls
  217  kubectl create deployment my-dep --image=nginx -n=rajesh
  218  kubectl get deploy -n=rajesh
  219  kubectl scale -h
  220  clear
  221  kubectl get deploy -n=rajesh
  222  kubectl scale --replicas=5 deploy/my-dep
  223  kubectl scale --replicas=5 deploy/my-dep -n=rajesh
  224  kubectl get deploy -n=rajesh
  225  clear
  226  kubectl get pod -n=rajesh --show-labels
  227  kubectl edit svc svc1 -n=rajesh
  228  kubectl describe svc svc1 -n=rajesh
  229  kubectl edit svc svc1 -n=rajesh
  230  kubectl get svc -n=rajesh
  231  kubectl get svc
  232  kubectl describe svc kubernetes
  233  history



LABEL DEEP DIVER
https://www.devopsschool.com/tutorial/kubernetes/labs/lab-12-kubernetes-labels.html





